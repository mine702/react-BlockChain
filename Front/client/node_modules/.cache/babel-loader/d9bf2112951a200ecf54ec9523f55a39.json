{"ast":null,"code":"import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { frequency } from '../../frequency.js';\nimport { oneof } from '../../oneof.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\nimport { uniqueArray } from '../../uniqueArray.js';\nimport { createDepthIdentifier } from '../helpers/DepthContext.js';\n\nfunction entriesOf(keyArb, valueArb, maxKeys, size, depthIdentifier) {\n  return convertToNext(uniqueArray(tuple(keyArb, valueArb), {\n    maxLength: maxKeys,\n    size,\n    comparator: 'SameValueZero',\n    selector: t => t[0],\n    depthIdentifier\n  }));\n}\n\nfunction mapOf(ka, va, maxKeys, size, depthIdentifier) {\n  return convertFromNext(entriesOf(ka, va, maxKeys, size, depthIdentifier).map(arrayToMapMapper, arrayToMapUnmapper));\n}\n\nfunction dictOf(ka, va, maxKeys, size, depthIdentifier) {\n  return convertFromNext(entriesOf(ka, va, maxKeys, size, depthIdentifier).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper));\n}\n\nfunction setOf(va, maxKeys, size, depthIdentifier) {\n  return convertFromNext(convertToNext(uniqueArray(va, {\n    maxLength: maxKeys,\n    size,\n    comparator: 'SameValueZero',\n    depthIdentifier\n  })).map(arrayToSetMapper, arrayToSetUnmapper));\n}\n\nfunction prototypeLessOf(objectArb) {\n  return convertFromNext(convertToNext(objectArb).map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper));\n}\n\nfunction typedArray(constraints) {\n  return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));\n}\n\nexport function anyArbitraryBuilder(constraints) {\n  const arbitrariesForBase = constraints.values;\n  const depthFactor = constraints.depthFactor;\n  const depthIdentifier = createDepthIdentifier();\n  const maxDepth = constraints.maxDepth;\n  const maxKeys = constraints.maxKeys;\n  const size = constraints.size;\n  const baseArb = oneof(...arbitrariesForBase, ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []));\n  return letrec(tie => ({\n    anything: oneof({\n      maxDepth,\n      depthFactor,\n      depthIdentifier\n    }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map(o => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withTypedArray ? [typedArray({\n      maxLength: maxKeys,\n      size\n    })] : []), ...(constraints.withSparseArray ? [sparseArray(tie('anything'), {\n      maxNumElements: maxKeys,\n      size,\n      depthIdentifier\n    })] : [])),\n    keys: constraints.withObjectString ? frequency({\n      arbitrary: constraints.key,\n      weight: 10\n    }, {\n      arbitrary: tie('anything').map(o => stringify(o)),\n      weight: 1\n    }) : constraints.key,\n    array: array(tie('anything'), {\n      maxLength: maxKeys,\n      size,\n      depthIdentifier\n    }),\n    set: setOf(tie('anything'), maxKeys, size, depthIdentifier),\n    map: oneof(mapOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier), mapOf(tie('anything'), tie('anything'), maxKeys, size, depthIdentifier)),\n    object: dictOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier)\n  })).anything;\n}","map":{"version":3,"names":["stringify","array","frequency","oneof","tuple","bigInt","date","float32Array","float64Array","int16Array","int32Array","int8Array","uint16Array","uint32Array","uint8Array","uint8ClampedArray","sparseArray","keyValuePairsToObjectMapper","keyValuePairsToObjectUnmapper","convertFromNext","convertToNext","arrayToMapMapper","arrayToMapUnmapper","arrayToSetMapper","arrayToSetUnmapper","objectToPrototypeLessMapper","objectToPrototypeLessUnmapper","letrec","uniqueArray","createDepthIdentifier","entriesOf","keyArb","valueArb","maxKeys","size","depthIdentifier","maxLength","comparator","selector","t","mapOf","ka","va","map","dictOf","setOf","prototypeLessOf","objectArb","typedArray","constraints","anyArbitraryBuilder","arbitrariesForBase","values","depthFactor","maxDepth","baseArb","withBigInt","withDate","tie","anything","withMap","withSet","withObjectString","o","withNullPrototype","withTypedArray","withSparseArray","maxNumElements","keys","arbitrary","key","weight","set","object"],"sources":["C:/Users/cyr50/OneDrive/바탕 화면/비트고급 프로젝트_tuffle/Front/client/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/AnyArbitraryBuilder.js"],"sourcesContent":["import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { frequency } from '../../frequency.js';\nimport { oneof } from '../../oneof.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\nimport { uniqueArray } from '../../uniqueArray.js';\nimport { createDepthIdentifier } from '../helpers/DepthContext.js';\nfunction entriesOf(keyArb, valueArb, maxKeys, size, depthIdentifier) {\n    return convertToNext(uniqueArray(tuple(keyArb, valueArb), {\n        maxLength: maxKeys,\n        size,\n        comparator: 'SameValueZero',\n        selector: (t) => t[0],\n        depthIdentifier,\n    }));\n}\nfunction mapOf(ka, va, maxKeys, size, depthIdentifier) {\n    return convertFromNext(entriesOf(ka, va, maxKeys, size, depthIdentifier).map(arrayToMapMapper, arrayToMapUnmapper));\n}\nfunction dictOf(ka, va, maxKeys, size, depthIdentifier) {\n    return convertFromNext(entriesOf(ka, va, maxKeys, size, depthIdentifier).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper));\n}\nfunction setOf(va, maxKeys, size, depthIdentifier) {\n    return convertFromNext(convertToNext(uniqueArray(va, { maxLength: maxKeys, size, comparator: 'SameValueZero', depthIdentifier })).map(arrayToSetMapper, arrayToSetUnmapper));\n}\nfunction prototypeLessOf(objectArb) {\n    return convertFromNext(convertToNext(objectArb).map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper));\n}\nfunction typedArray(constraints) {\n    return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));\n}\nexport function anyArbitraryBuilder(constraints) {\n    const arbitrariesForBase = constraints.values;\n    const depthFactor = constraints.depthFactor;\n    const depthIdentifier = createDepthIdentifier();\n    const maxDepth = constraints.maxDepth;\n    const maxKeys = constraints.maxKeys;\n    const size = constraints.size;\n    const baseArb = oneof(...arbitrariesForBase, ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []));\n    return letrec((tie) => ({\n        anything: oneof({ maxDepth, depthFactor, depthIdentifier }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map((o) => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withTypedArray ? [typedArray({ maxLength: maxKeys, size })] : []), ...(constraints.withSparseArray\n            ? [sparseArray(tie('anything'), { maxNumElements: maxKeys, size, depthIdentifier })]\n            : [])),\n        keys: constraints.withObjectString\n            ? frequency({ arbitrary: constraints.key, weight: 10 }, { arbitrary: tie('anything').map((o) => stringify(o)), weight: 1 })\n            : constraints.key,\n        array: array(tie('anything'), { maxLength: maxKeys, size, depthIdentifier }),\n        set: setOf(tie('anything'), maxKeys, size, depthIdentifier),\n        map: oneof(mapOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier), mapOf(tie('anything'), tie('anything'), maxKeys, size, depthIdentifier)),\n        object: dictOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier),\n    })).anything;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}