{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod, hasCloneMethod } from '../../check/symbols.js';\nexport class ConstantArbitrary extends NextArbitrary {\n  constructor(values) {\n    super();\n    this.values = values;\n  }\n\n  generate(mrng, _biasFactor) {\n    const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);\n    const value = this.values[idx];\n\n    if (!hasCloneMethod(value)) {\n      return new NextValue(value, idx);\n    }\n\n    return new NextValue(value, idx, () => value[cloneMethod]());\n  }\n\n  canShrinkWithoutContext(value) {\n    for (let idx = 0; idx !== this.values.length; ++idx) {\n      if (Object.is(this.values[idx], value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  shrink(value, context) {\n    if (context === 0 || Object.is(value, this.values[0])) {\n      return Stream.nil();\n    }\n\n    return Stream.of(new NextValue(this.values[0], 0));\n  }\n\n}","map":{"version":3,"names":["Stream","NextArbitrary","NextValue","cloneMethod","hasCloneMethod","ConstantArbitrary","constructor","values","generate","mrng","_biasFactor","idx","length","nextInt","value","canShrinkWithoutContext","Object","is","shrink","context","nil","of"],"sources":["C:/Users/cyr50/OneDrive/바탕 화면/비트고급 프로젝트_tuffle/Front/client/node_modules/fast-check/lib/esm/arbitrary/_internals/ConstantArbitrary.js"],"sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod, hasCloneMethod } from '../../check/symbols.js';\nexport class ConstantArbitrary extends NextArbitrary {\n    constructor(values) {\n        super();\n        this.values = values;\n    }\n    generate(mrng, _biasFactor) {\n        const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);\n        const value = this.values[idx];\n        if (!hasCloneMethod(value)) {\n            return new NextValue(value, idx);\n        }\n        return new NextValue(value, idx, () => value[cloneMethod]());\n    }\n    canShrinkWithoutContext(value) {\n        for (let idx = 0; idx !== this.values.length; ++idx) {\n            if (Object.is(this.values[idx], value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    shrink(value, context) {\n        if (context === 0 || Object.is(value, this.values[0])) {\n            return Stream.nil();\n        }\n        return Stream.of(new NextValue(this.values[0], 0));\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,SAAT,QAA0B,+CAA1B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,wBAA5C;AACA,OAAO,MAAMC,iBAAN,SAAgCJ,aAAhC,CAA8C;EACjDK,WAAW,CAACC,MAAD,EAAS;IAChB;IACA,KAAKA,MAAL,GAAcA,MAAd;EACH;;EACDC,QAAQ,CAACC,IAAD,EAAOC,WAAP,EAAoB;IACxB,MAAMC,GAAG,GAAG,KAAKJ,MAAL,CAAYK,MAAZ,KAAuB,CAAvB,GAA2B,CAA3B,GAA+BH,IAAI,CAACI,OAAL,CAAa,CAAb,EAAgB,KAAKN,MAAL,CAAYK,MAAZ,GAAqB,CAArC,CAA3C;IACA,MAAME,KAAK,GAAG,KAAKP,MAAL,CAAYI,GAAZ,CAAd;;IACA,IAAI,CAACP,cAAc,CAACU,KAAD,CAAnB,EAA4B;MACxB,OAAO,IAAIZ,SAAJ,CAAcY,KAAd,EAAqBH,GAArB,CAAP;IACH;;IACD,OAAO,IAAIT,SAAJ,CAAcY,KAAd,EAAqBH,GAArB,EAA0B,MAAMG,KAAK,CAACX,WAAD,CAAL,EAAhC,CAAP;EACH;;EACDY,uBAAuB,CAACD,KAAD,EAAQ;IAC3B,KAAK,IAAIH,GAAG,GAAG,CAAf,EAAkBA,GAAG,KAAK,KAAKJ,MAAL,CAAYK,MAAtC,EAA8C,EAAED,GAAhD,EAAqD;MACjD,IAAIK,MAAM,CAACC,EAAP,CAAU,KAAKV,MAAL,CAAYI,GAAZ,CAAV,EAA4BG,KAA5B,CAAJ,EAAwC;QACpC,OAAO,IAAP;MACH;IACJ;;IACD,OAAO,KAAP;EACH;;EACDI,MAAM,CAACJ,KAAD,EAAQK,OAAR,EAAiB;IACnB,IAAIA,OAAO,KAAK,CAAZ,IAAiBH,MAAM,CAACC,EAAP,CAAUH,KAAV,EAAiB,KAAKP,MAAL,CAAY,CAAZ,CAAjB,CAArB,EAAuD;MACnD,OAAOP,MAAM,CAACoB,GAAP,EAAP;IACH;;IACD,OAAOpB,MAAM,CAACqB,EAAP,CAAU,IAAInB,SAAJ,CAAc,KAAKK,MAAL,CAAY,CAAZ,CAAd,EAA8B,CAA9B,CAAV,CAAP;EACH;;AA1BgD"},"metadata":{},"sourceType":"module"}