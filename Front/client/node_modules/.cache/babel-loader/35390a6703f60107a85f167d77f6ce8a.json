{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { integer } from '../integer.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\n\nfunction biasedMaxLength(minLength, maxLength) {\n  if (minLength === maxLength) {\n    return minLength;\n  }\n\n  return minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2));\n}\n\nexport class ArrayArbitrary extends NextArbitrary {\n  constructor(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder) {\n    super();\n    this.arb = arb;\n    this.minLength = minLength;\n    this.maxGeneratedLength = maxGeneratedLength;\n    this.maxLength = maxLength;\n    this.setBuilder = setBuilder;\n    this.lengthArb = convertToNext(integer(minLength, maxGeneratedLength));\n    this.depthContext = getDepthContextFor(depthIdentifier);\n  }\n\n  preFilter(tab) {\n    if (this.setBuilder === undefined) {\n      return tab;\n    }\n\n    const s = this.setBuilder();\n\n    for (let index = 0; index !== tab.length; ++index) {\n      s.tryAdd(tab[index]);\n    }\n\n    return s.getData();\n  }\n\n  static makeItCloneable(vs, shrinkables) {\n    vs[cloneMethod] = () => {\n      const cloned = [];\n\n      for (let idx = 0; idx !== shrinkables.length; ++idx) {\n        cloned.push(shrinkables[idx].value);\n      }\n\n      this.makeItCloneable(cloned, shrinkables);\n      return cloned;\n    };\n\n    return vs;\n  }\n\n  generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n    let numSkippedInRow = 0;\n    const s = setBuilder();\n\n    while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {\n      const current = this.arb.generate(mrng, biasFactorItems);\n\n      if (s.tryAdd(current)) {\n        numSkippedInRow = 0;\n      } else {\n        numSkippedInRow += 1;\n      }\n    }\n\n    return s.getData();\n  }\n\n  safeGenerateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n    const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n    this.depthContext.depth += depthImpact;\n\n    try {\n      return this.generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems);\n    } finally {\n      this.depthContext.depth -= depthImpact;\n    }\n  }\n\n  generateNItems(N, mrng, biasFactorItems) {\n    const items = [];\n\n    for (let index = 0; index !== N; ++index) {\n      const current = this.arb.generate(mrng, biasFactorItems);\n      items.push(current);\n    }\n\n    return items;\n  }\n\n  safeGenerateNItems(N, mrng, biasFactorItems) {\n    const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n    this.depthContext.depth += depthImpact;\n\n    try {\n      return this.generateNItems(N, mrng, biasFactorItems);\n    } finally {\n      this.depthContext.depth -= depthImpact;\n    }\n  }\n\n  wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n    const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n    let cloneable = false;\n    const vs = [];\n    const itemsContexts = [];\n\n    for (let idx = 0; idx !== items.length; ++idx) {\n      const s = items[idx];\n      cloneable = cloneable || s.hasToBeCloned;\n      vs.push(s.value);\n      itemsContexts.push(s.context);\n    }\n\n    if (cloneable) {\n      ArrayArbitrary.makeItCloneable(vs, items);\n    }\n\n    const context = {\n      shrunkOnce,\n      lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined ? itemsRawLengthContext : undefined,\n      itemsContexts,\n      startIndex\n    };\n    return new NextValue(vs, context);\n  }\n\n  generate(mrng, biasFactor) {\n    const biasMeta = this.applyBias(mrng, biasFactor);\n    const targetSize = biasMeta.size;\n    const items = this.setBuilder !== undefined ? this.safeGenerateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems) : this.safeGenerateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n    return this.wrapper(items, false, undefined, 0);\n  }\n\n  applyBias(mrng, biasFactor) {\n    if (biasFactor === undefined) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n\n    if (this.minLength === this.maxGeneratedLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n\n    if (mrng.nextInt(1, biasFactor) !== 1) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value\n      };\n    }\n\n    if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {\n      return {\n        size: this.lengthArb.generate(mrng, undefined).value,\n        biasFactorItems: biasFactor\n      };\n    }\n\n    const maxBiasedLength = biasedMaxLength(this.minLength, this.maxGeneratedLength);\n    const targetSizeValue = convertToNext(integer(this.minLength, maxBiasedLength)).generate(mrng, undefined);\n    return {\n      size: targetSizeValue.value,\n      biasFactorItems: biasFactor\n    };\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n      return false;\n    }\n\n    for (let index = 0; index !== value.length; ++index) {\n      if (!(index in value)) {\n        return false;\n      }\n\n      if (!this.arb.canShrinkWithoutContext(value[index])) {\n        return false;\n      }\n    }\n\n    const filtered = this.preFilter(value.map(item => new NextValue(item, undefined)));\n    return filtered.length === value.length;\n  }\n\n  shrinkItemByItem(value, safeContext, endIndex) {\n    let shrinks = Stream.nil();\n\n    for (let index = safeContext.startIndex; index < endIndex; ++index) {\n      shrinks = shrinks.join(makeLazy(() => this.arb.shrink(value[index], safeContext.itemsContexts[index]).map(v => {\n        const beforeCurrent = value.slice(0, index).map((v, i) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i]));\n        const afterCurrent = value.slice(index + 1).map((v, i) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i + index + 1]));\n        return [beforeCurrent.concat(v).concat(afterCurrent), undefined, index];\n      })));\n    }\n\n    return shrinks;\n  }\n\n  shrinkImpl(value, context) {\n    if (value.length === 0) {\n      return Stream.nil();\n    }\n\n    const safeContext = context !== undefined ? context : {\n      shrunkOnce: false,\n      lengthContext: undefined,\n      itemsContexts: [],\n      startIndex: 0\n    };\n    return this.lengthArb.shrink(value.length, safeContext.lengthContext).drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0).map(lengthValue => {\n      const sliceStart = value.length - lengthValue.value;\n      return [value.slice(sliceStart).map((v, index) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])), lengthValue.context, 0];\n    }).join(makeLazy(() => value.length > this.minLength ? this.shrinkItemByItem(value, safeContext, 1) : this.shrinkItemByItem(value, safeContext, value.length))).join(value.length > this.minLength ? makeLazy(() => {\n      const subContext = {\n        shrunkOnce: false,\n        lengthContext: undefined,\n        itemsContexts: safeContext.itemsContexts.slice(1),\n        startIndex: 0\n      };\n      return this.shrinkImpl(value.slice(1), subContext).filter(v => this.minLength <= v[0].length + 1).map(v => {\n        return [[new NextValue(cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]), undefined, 0];\n      });\n    }) : Stream.nil());\n  }\n\n  shrink(value, context) {\n    return this.shrinkImpl(value, context).map(contextualValue => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));\n  }\n\n}","map":{"version":3,"names":["Stream","cloneIfNeeded","cloneMethod","integer","makeLazy","NextArbitrary","convertToNext","NextValue","getDepthContextFor","biasedMaxLength","minLength","maxLength","Math","floor","log","ArrayArbitrary","constructor","arb","maxGeneratedLength","depthIdentifier","setBuilder","lengthArb","depthContext","preFilter","tab","undefined","s","index","length","tryAdd","getData","makeItCloneable","vs","shrinkables","cloned","idx","push","value","generateNItemsNoDuplicates","N","mrng","biasFactorItems","numSkippedInRow","size","current","generate","safeGenerateNItemsNoDuplicates","depthImpact","max","depth","generateNItems","items","safeGenerateNItems","wrapper","itemsRaw","shrunkOnce","itemsRawLengthContext","startIndex","cloneable","itemsContexts","hasToBeCloned","context","lengthContext","biasFactor","biasMeta","applyBias","targetSize","nextInt","maxBiasedLength","targetSizeValue","canShrinkWithoutContext","Array","isArray","filtered","map","item","shrinkItemByItem","safeContext","endIndex","shrinks","nil","join","shrink","v","beforeCurrent","slice","i","afterCurrent","concat","shrinkImpl","drop","lengthValue","sliceStart","subContext","filter","contextualValue"],"sources":["C:/Users/cyr50/OneDrive/바탕 화면/비트고급 프로젝트_tuffle/Front/client/node_modules/fast-check/lib/esm/arbitrary/_internals/ArrayArbitrary.js"],"sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { integer } from '../integer.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nfunction biasedMaxLength(minLength, maxLength) {\n    if (minLength === maxLength) {\n        return minLength;\n    }\n    return minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2));\n}\nexport class ArrayArbitrary extends NextArbitrary {\n    constructor(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder) {\n        super();\n        this.arb = arb;\n        this.minLength = minLength;\n        this.maxGeneratedLength = maxGeneratedLength;\n        this.maxLength = maxLength;\n        this.setBuilder = setBuilder;\n        this.lengthArb = convertToNext(integer(minLength, maxGeneratedLength));\n        this.depthContext = getDepthContextFor(depthIdentifier);\n    }\n    preFilter(tab) {\n        if (this.setBuilder === undefined) {\n            return tab;\n        }\n        const s = this.setBuilder();\n        for (let index = 0; index !== tab.length; ++index) {\n            s.tryAdd(tab[index]);\n        }\n        return s.getData();\n    }\n    static makeItCloneable(vs, shrinkables) {\n        vs[cloneMethod] = () => {\n            const cloned = [];\n            for (let idx = 0; idx !== shrinkables.length; ++idx) {\n                cloned.push(shrinkables[idx].value);\n            }\n            this.makeItCloneable(cloned, shrinkables);\n            return cloned;\n        };\n        return vs;\n    }\n    generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n        let numSkippedInRow = 0;\n        const s = setBuilder();\n        while (s.size() < N && numSkippedInRow < this.maxGeneratedLength) {\n            const current = this.arb.generate(mrng, biasFactorItems);\n            if (s.tryAdd(current)) {\n                numSkippedInRow = 0;\n            }\n            else {\n                numSkippedInRow += 1;\n            }\n        }\n        return s.getData();\n    }\n    safeGenerateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n        const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n        this.depthContext.depth += depthImpact;\n        try {\n            return this.generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems);\n        }\n        finally {\n            this.depthContext.depth -= depthImpact;\n        }\n    }\n    generateNItems(N, mrng, biasFactorItems) {\n        const items = [];\n        for (let index = 0; index !== N; ++index) {\n            const current = this.arb.generate(mrng, biasFactorItems);\n            items.push(current);\n        }\n        return items;\n    }\n    safeGenerateNItems(N, mrng, biasFactorItems) {\n        const depthImpact = Math.max(0, N - biasedMaxLength(this.minLength, this.maxGeneratedLength));\n        this.depthContext.depth += depthImpact;\n        try {\n            return this.generateNItems(N, mrng, biasFactorItems);\n        }\n        finally {\n            this.depthContext.depth -= depthImpact;\n        }\n    }\n    wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n        const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n        let cloneable = false;\n        const vs = [];\n        const itemsContexts = [];\n        for (let idx = 0; idx !== items.length; ++idx) {\n            const s = items[idx];\n            cloneable = cloneable || s.hasToBeCloned;\n            vs.push(s.value);\n            itemsContexts.push(s.context);\n        }\n        if (cloneable) {\n            ArrayArbitrary.makeItCloneable(vs, items);\n        }\n        const context = {\n            shrunkOnce,\n            lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined\n                ? itemsRawLengthContext\n                : undefined,\n            itemsContexts,\n            startIndex,\n        };\n        return new NextValue(vs, context);\n    }\n    generate(mrng, biasFactor) {\n        const biasMeta = this.applyBias(mrng, biasFactor);\n        const targetSize = biasMeta.size;\n        const items = this.setBuilder !== undefined\n            ? this.safeGenerateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems)\n            : this.safeGenerateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n        return this.wrapper(items, false, undefined, 0);\n    }\n    applyBias(mrng, biasFactor) {\n        if (biasFactor === undefined) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (this.minLength === this.maxGeneratedLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxGeneratedLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        const maxBiasedLength = biasedMaxLength(this.minLength, this.maxGeneratedLength);\n        const targetSizeValue = convertToNext(integer(this.minLength, maxBiasedLength)).generate(mrng, undefined);\n        return { size: targetSizeValue.value, biasFactorItems: biasFactor };\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n            return false;\n        }\n        for (let index = 0; index !== value.length; ++index) {\n            if (!(index in value)) {\n                return false;\n            }\n            if (!this.arb.canShrinkWithoutContext(value[index])) {\n                return false;\n            }\n        }\n        const filtered = this.preFilter(value.map((item) => new NextValue(item, undefined)));\n        return filtered.length === value.length;\n    }\n    shrinkItemByItem(value, safeContext, endIndex) {\n        let shrinks = Stream.nil();\n        for (let index = safeContext.startIndex; index < endIndex; ++index) {\n            shrinks = shrinks.join(makeLazy(() => this.arb\n                .shrink(value[index], safeContext.itemsContexts[index])\n                .map((v) => {\n                const beforeCurrent = value\n                    .slice(0, index)\n                    .map((v, i) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i]));\n                const afterCurrent = value\n                    .slice(index + 1)\n                    .map((v, i) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i + index + 1]));\n                return [\n                    beforeCurrent.concat(v).concat(afterCurrent),\n                    undefined,\n                    index,\n                ];\n            })));\n        }\n        return shrinks;\n    }\n    shrinkImpl(value, context) {\n        if (value.length === 0) {\n            return Stream.nil();\n        }\n        const safeContext = context !== undefined\n            ? context\n            : { shrunkOnce: false, lengthContext: undefined, itemsContexts: [], startIndex: 0 };\n        return (this.lengthArb\n            .shrink(value.length, safeContext.lengthContext)\n            .drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0)\n            .map((lengthValue) => {\n            const sliceStart = value.length - lengthValue.value;\n            return [\n                value\n                    .slice(sliceStart)\n                    .map((v, index) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])),\n                lengthValue.context,\n                0,\n            ];\n        })\n            .join(makeLazy(() => value.length > this.minLength\n            ? this.shrinkItemByItem(value, safeContext, 1)\n            : this.shrinkItemByItem(value, safeContext, value.length)))\n            .join(value.length > this.minLength\n            ? makeLazy(() => {\n                const subContext = {\n                    shrunkOnce: false,\n                    lengthContext: undefined,\n                    itemsContexts: safeContext.itemsContexts.slice(1),\n                    startIndex: 0,\n                };\n                return this.shrinkImpl(value.slice(1), subContext)\n                    .filter((v) => this.minLength <= v[0].length + 1)\n                    .map((v) => {\n                    return [\n                        [new NextValue(cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]),\n                        undefined,\n                        0,\n                    ];\n                });\n            })\n            : Stream.nil()));\n    }\n    shrink(value, context) {\n        return this.shrinkImpl(value, context).map((contextualValue) => this.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}