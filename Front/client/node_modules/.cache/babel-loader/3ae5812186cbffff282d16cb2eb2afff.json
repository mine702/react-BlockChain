{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeConstant = void 0;\n/**\n * @protected\n *\n * @packageDocumentation\n */\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:ast:decode\");\n\nconst read_1 = __importDefault(require(\"../../read\"));\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nconst Basic = __importStar(require(\"../../basic\"));\n\nconst Bytes = __importStar(require(\"../../bytes\"));\n\nconst errors_1 = require(\"../../errors\");\n\nfunction* decodeConstant(dataType, pointer, info) {\n  debug(\"pointer %o\", pointer); //normally, we just dispatch to decodeBasic or decodeBytes.\n  //for statically-sized bytes, however, we need to make a special case.\n  //you see, decodeBasic expects to find the bytes at the *beginning*\n  //of the word, but readDefinition will put them at the *end* of the\n  //word.  So we'll have to adjust things ourselves.\n  //(if the constant is a string constant, it'll be *just* the bytes, so\n  //we have to pad it...)\n\n  if (dataType.typeClass === \"bytes\" && dataType.kind === \"static\") {\n    const size = dataType.length;\n    let word;\n\n    try {\n      word = yield* read_1.default(pointer, info.state);\n    } catch (error) {\n      return errors_1.handleDecodingError(dataType, error);\n    }\n\n    debug(\"got word: %O\", word); //not bothering to check padding; shouldn't be necessary\n\n    const bytes = word.slice(-size); //isolate the bytes we want (works in both cases, even if string literal is short)\n\n    return {\n      type: dataType,\n      kind: \"value\",\n      value: {\n        asHex: Conversion.toHexString(bytes, size, true) //padding in case of short string literal\n\n      }\n    }; //we'll skip including a raw value, as that would be meaningless\n  } //otherwise, as mentioned, just dispatch to decodeBasic or decodeBytes\n\n\n  debug(\"not a static bytes\");\n\n  if (dataType.typeClass === \"bytes\" || dataType.typeClass === \"string\") {\n    return yield* Bytes.Decode.decodeBytes(dataType, pointer, info);\n  }\n\n  return yield* Basic.Decode.decodeBasic(dataType, pointer, info);\n}\n\nexports.decodeConstant = decodeConstant;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAKA;;AACA,MAAMA,KAAK,GAAGC,gBAAY,kBAAZ,CAAd;;AAEA;;AACA;;AAGA;;AACA;;AAGA;;AAEA,UAAiBC,cAAjB,CACEC,QADF,EAEEC,OAFF,EAGEC,IAHF,EAGmB;EAEjBL,KAAK,CAAC,YAAD,EAAeI,OAAf,CAAL,CAFiB,CAIjB;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAID,QAAQ,CAACG,SAAT,KAAuB,OAAvB,IAAkCH,QAAQ,CAACI,IAAT,KAAkB,QAAxD,EAAkE;IAChE,MAAMC,IAAI,GAAGL,QAAQ,CAACM,MAAtB;IACA,IAAIC,IAAJ;;IACA,IAAI;MACFA,IAAI,GAAG,OAAOC,eAAKP,OAAL,EAAcC,IAAI,CAACO,KAAnB,CAAd;IACD,CAFD,CAEE,OAAOC,KAAP,EAAc;MACd,OAAOC,6BAAoBX,QAApB,EAA8BU,KAA9B,CAAP;IACD;;IACDb,KAAK,CAAC,cAAD,EAAiBU,IAAjB,CAAL,CARgE,CAShE;;IACA,MAAMK,KAAK,GAAGL,IAAI,CAACM,KAAL,CAAW,CAACR,IAAZ,CAAd,CAVgE,CAU/B;;IACjC,OAAO;MACLS,IAAI,EAAEd,QADD;MAELI,IAAI,EAAE,OAFD;MAGLW,KAAK,EAAE;QACLC,KAAK,EAAEC,UAAU,CAACC,WAAX,CAAuBN,KAAvB,EAA8BP,IAA9B,EAAoC,IAApC,CADF,CAC4C;;MAD5C;IAHF,CAAP,CAXgE,CAiB7D;EACJ,CA9BgB,CAgCjB;;;EACAR,KAAK,CAAC,oBAAD,CAAL;;EACA,IAAIG,QAAQ,CAACG,SAAT,KAAuB,OAAvB,IAAkCH,QAAQ,CAACG,SAAT,KAAuB,QAA7D,EAAuE;IACrE,OAAO,OAAOgB,KAAK,CAACC,MAAN,CAAaC,WAAb,CAAyBrB,QAAzB,EAAmCC,OAAnC,EAA4CC,IAA5C,CAAd;EACD;;EACD,OAAO,OAAOoB,KAAK,CAACF,MAAN,CAAaG,WAAb,CAAyBvB,QAAzB,EAAmCC,OAAnC,EAA4CC,IAA5C,CAAd;AACD;;AAzCDsB","names":["debug","debug_1","decodeConstant","dataType","pointer","info","typeClass","kind","size","length","word","read_1","state","error","errors_1","bytes","slice","type","value","asHex","Conversion","toHexString","Bytes","Decode","decodeBytes","Basic","decodeBasic","exports"],"sourceRoot":"","sources":["../../../../lib/ast-constant/decode/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}