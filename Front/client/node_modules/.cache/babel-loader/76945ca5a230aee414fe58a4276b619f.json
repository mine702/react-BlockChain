{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { convertFromNext, convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nimport { depthFactorFromSizeForArbitrary } from './helpers/MaxLengthFromMinLength.js';\nexport class FrequencyArbitrary extends NextArbitrary {\n  constructor(warbs, constraints, context) {\n    super();\n    this.warbs = warbs;\n    this.constraints = constraints;\n    this.context = context;\n    let currentWeight = 0;\n    this.cumulatedWeights = [];\n\n    for (let idx = 0; idx !== warbs.length; ++idx) {\n      currentWeight += warbs[idx].weight;\n      this.cumulatedWeights.push(currentWeight);\n    }\n\n    this.totalWeight = currentWeight;\n  }\n\n  static fromOld(warbs, constraints, label) {\n    return convertFromNext(FrequencyArbitrary.from(warbs.map(w => Object.assign(Object.assign({}, w), {\n      arbitrary: convertToNext(w.arbitrary)\n    })), constraints, label));\n  }\n\n  static from(warbs, constraints, label) {\n    if (warbs.length === 0) {\n      throw new Error(`${label} expects at least one weighted arbitrary`);\n    }\n\n    let totalWeight = 0;\n\n    for (let idx = 0; idx !== warbs.length; ++idx) {\n      const currentArbitrary = warbs[idx].arbitrary;\n\n      if (currentArbitrary === undefined) {\n        throw new Error(`${label} expects arbitraries to be specified`);\n      }\n\n      const currentWeight = warbs[idx].weight;\n      totalWeight += currentWeight;\n\n      if (!Number.isInteger(currentWeight)) {\n        throw new Error(`${label} expects weights to be integer values`);\n      }\n\n      if (currentWeight < 0) {\n        throw new Error(`${label} expects weights to be superior or equal to 0`);\n      }\n    }\n\n    if (totalWeight <= 0) {\n      throw new Error(`${label} expects the sum of weights to be strictly superior to 0`);\n    }\n\n    const sanitizedConstraints = {\n      depthFactor: depthFactorFromSizeForArbitrary(constraints.depthFactor),\n      depthIdentifier: constraints.depthIdentifier,\n      maxDepth: constraints.maxDepth,\n      withCrossShrink: constraints.withCrossShrink\n    };\n    return new FrequencyArbitrary(warbs, sanitizedConstraints, getDepthContextFor(constraints.depthIdentifier));\n  }\n\n  generate(mrng, biasFactor) {\n    if (this.mustGenerateFirst()) {\n      return this.safeGenerateForIndex(mrng, 0, biasFactor);\n    }\n\n    const selected = mrng.nextInt(this.computeNegDepthBenefit(), this.totalWeight - 1);\n\n    for (let idx = 0; idx !== this.cumulatedWeights.length; ++idx) {\n      if (selected < this.cumulatedWeights[idx]) {\n        return this.safeGenerateForIndex(mrng, idx, biasFactor);\n      }\n    }\n\n    throw new Error(`Unable to generate from fc.frequency`);\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.canShrinkWithoutContextIndex(value) !== -1;\n  }\n\n  shrink(value, context) {\n    if (context !== undefined) {\n      const safeContext = context;\n      const selectedIndex = safeContext.selectedIndex;\n      const originalBias = safeContext.originalBias;\n      const originalArbitrary = this.warbs[selectedIndex].arbitrary;\n      const originalShrinks = originalArbitrary.shrink(value, safeContext.originalContext).map(v => this.mapIntoNextValue(selectedIndex, v, null, originalBias));\n\n      if (safeContext.clonedMrngForFallbackFirst !== null) {\n        if (safeContext.cachedGeneratedForFirst === undefined) {\n          safeContext.cachedGeneratedForFirst = this.safeGenerateForIndex(safeContext.clonedMrngForFallbackFirst, 0, originalBias);\n        }\n\n        const valueFromFirst = safeContext.cachedGeneratedForFirst;\n        return Stream.of(valueFromFirst).join(originalShrinks);\n      }\n\n      return originalShrinks;\n    }\n\n    const potentialSelectedIndex = this.canShrinkWithoutContextIndex(value);\n\n    if (potentialSelectedIndex === -1) {\n      return Stream.nil();\n    }\n\n    return this.defaultShrinkForFirst(potentialSelectedIndex).join(this.warbs[potentialSelectedIndex].arbitrary.shrink(value, undefined).map(v => this.mapIntoNextValue(potentialSelectedIndex, v, null, undefined)));\n  }\n\n  defaultShrinkForFirst(selectedIndex) {\n    ++this.context.depth;\n\n    try {\n      if (!this.mustFallbackToFirstInShrink(selectedIndex) || this.warbs[0].fallbackValue === undefined) {\n        return Stream.nil();\n      }\n    } finally {\n      --this.context.depth;\n    }\n\n    const rawShrinkValue = new NextValue(this.warbs[0].fallbackValue.default, undefined);\n    return Stream.of(this.mapIntoNextValue(0, rawShrinkValue, null, undefined));\n  }\n\n  canShrinkWithoutContextIndex(value) {\n    if (this.mustGenerateFirst()) {\n      return this.warbs[0].arbitrary.canShrinkWithoutContext(value) ? 0 : -1;\n    }\n\n    try {\n      ++this.context.depth;\n\n      for (let idx = 0; idx !== this.warbs.length; ++idx) {\n        const warb = this.warbs[idx];\n\n        if (warb.weight !== 0 && warb.arbitrary.canShrinkWithoutContext(value)) {\n          return idx;\n        }\n      }\n\n      return -1;\n    } finally {\n      --this.context.depth;\n    }\n  }\n\n  mapIntoNextValue(idx, value, clonedMrngForFallbackFirst, biasFactor) {\n    const context = {\n      selectedIndex: idx,\n      originalBias: biasFactor,\n      originalContext: value.context,\n      clonedMrngForFallbackFirst\n    };\n    return new NextValue(value.value, context);\n  }\n\n  safeGenerateForIndex(mrng, idx, biasFactor) {\n    ++this.context.depth;\n\n    try {\n      const value = this.warbs[idx].arbitrary.generate(mrng, biasFactor);\n      const clonedMrngForFallbackFirst = this.mustFallbackToFirstInShrink(idx) ? mrng.clone() : null;\n      return this.mapIntoNextValue(idx, value, clonedMrngForFallbackFirst, biasFactor);\n    } finally {\n      --this.context.depth;\n    }\n  }\n\n  mustGenerateFirst() {\n    return this.constraints.maxDepth !== undefined && this.constraints.maxDepth <= this.context.depth;\n  }\n\n  mustFallbackToFirstInShrink(idx) {\n    return idx !== 0 && !!this.constraints.withCrossShrink && this.warbs[0].weight !== 0;\n  }\n\n  computeNegDepthBenefit() {\n    const depthFactor = this.constraints.depthFactor;\n\n    if (depthFactor === undefined || depthFactor <= 0 || this.warbs[0].weight === 0) {\n      return 0;\n    }\n\n    const depthBenefit = Math.floor(Math.pow(1 + depthFactor, this.context.depth)) - 1;\n    return -Math.min(this.totalWeight * depthBenefit, Number.MAX_SAFE_INTEGER) || 0;\n  }\n\n}","map":{"version":3,"names":["Stream","convertFromNext","convertToNext","NextArbitrary","NextValue","getDepthContextFor","depthFactorFromSizeForArbitrary","FrequencyArbitrary","constructor","warbs","constraints","context","currentWeight","cumulatedWeights","idx","length","weight","push","totalWeight","fromOld","label","from","map","w","Object","assign","arbitrary","Error","currentArbitrary","undefined","Number","isInteger","sanitizedConstraints","depthFactor","depthIdentifier","maxDepth","withCrossShrink","generate","mrng","biasFactor","mustGenerateFirst","safeGenerateForIndex","selected","nextInt","computeNegDepthBenefit","canShrinkWithoutContext","value","canShrinkWithoutContextIndex","shrink","safeContext","selectedIndex","originalBias","originalArbitrary","originalShrinks","originalContext","v","mapIntoNextValue","clonedMrngForFallbackFirst","cachedGeneratedForFirst","valueFromFirst","of","join","potentialSelectedIndex","nil","defaultShrinkForFirst","depth","mustFallbackToFirstInShrink","fallbackValue","rawShrinkValue","default","warb","clone","depthBenefit","Math","floor","pow","min","MAX_SAFE_INTEGER"],"sources":["C:/Users/cyr50/OneDrive/바탕 화면/비트고급 프로젝트_tuffle/Front/client/node_modules/fast-check/lib/esm/arbitrary/_internals/FrequencyArbitrary.js"],"sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { convertFromNext, convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nimport { depthFactorFromSizeForArbitrary } from './helpers/MaxLengthFromMinLength.js';\nexport class FrequencyArbitrary extends NextArbitrary {\n    constructor(warbs, constraints, context) {\n        super();\n        this.warbs = warbs;\n        this.constraints = constraints;\n        this.context = context;\n        let currentWeight = 0;\n        this.cumulatedWeights = [];\n        for (let idx = 0; idx !== warbs.length; ++idx) {\n            currentWeight += warbs[idx].weight;\n            this.cumulatedWeights.push(currentWeight);\n        }\n        this.totalWeight = currentWeight;\n    }\n    static fromOld(warbs, constraints, label) {\n        return convertFromNext(FrequencyArbitrary.from(warbs.map((w) => (Object.assign(Object.assign({}, w), { arbitrary: convertToNext(w.arbitrary) }))), constraints, label));\n    }\n    static from(warbs, constraints, label) {\n        if (warbs.length === 0) {\n            throw new Error(`${label} expects at least one weighted arbitrary`);\n        }\n        let totalWeight = 0;\n        for (let idx = 0; idx !== warbs.length; ++idx) {\n            const currentArbitrary = warbs[idx].arbitrary;\n            if (currentArbitrary === undefined) {\n                throw new Error(`${label} expects arbitraries to be specified`);\n            }\n            const currentWeight = warbs[idx].weight;\n            totalWeight += currentWeight;\n            if (!Number.isInteger(currentWeight)) {\n                throw new Error(`${label} expects weights to be integer values`);\n            }\n            if (currentWeight < 0) {\n                throw new Error(`${label} expects weights to be superior or equal to 0`);\n            }\n        }\n        if (totalWeight <= 0) {\n            throw new Error(`${label} expects the sum of weights to be strictly superior to 0`);\n        }\n        const sanitizedConstraints = {\n            depthFactor: depthFactorFromSizeForArbitrary(constraints.depthFactor),\n            depthIdentifier: constraints.depthIdentifier,\n            maxDepth: constraints.maxDepth,\n            withCrossShrink: constraints.withCrossShrink,\n        };\n        return new FrequencyArbitrary(warbs, sanitizedConstraints, getDepthContextFor(constraints.depthIdentifier));\n    }\n    generate(mrng, biasFactor) {\n        if (this.mustGenerateFirst()) {\n            return this.safeGenerateForIndex(mrng, 0, biasFactor);\n        }\n        const selected = mrng.nextInt(this.computeNegDepthBenefit(), this.totalWeight - 1);\n        for (let idx = 0; idx !== this.cumulatedWeights.length; ++idx) {\n            if (selected < this.cumulatedWeights[idx]) {\n                return this.safeGenerateForIndex(mrng, idx, biasFactor);\n            }\n        }\n        throw new Error(`Unable to generate from fc.frequency`);\n    }\n    canShrinkWithoutContext(value) {\n        return this.canShrinkWithoutContextIndex(value) !== -1;\n    }\n    shrink(value, context) {\n        if (context !== undefined) {\n            const safeContext = context;\n            const selectedIndex = safeContext.selectedIndex;\n            const originalBias = safeContext.originalBias;\n            const originalArbitrary = this.warbs[selectedIndex].arbitrary;\n            const originalShrinks = originalArbitrary\n                .shrink(value, safeContext.originalContext)\n                .map((v) => this.mapIntoNextValue(selectedIndex, v, null, originalBias));\n            if (safeContext.clonedMrngForFallbackFirst !== null) {\n                if (safeContext.cachedGeneratedForFirst === undefined) {\n                    safeContext.cachedGeneratedForFirst = this.safeGenerateForIndex(safeContext.clonedMrngForFallbackFirst, 0, originalBias);\n                }\n                const valueFromFirst = safeContext.cachedGeneratedForFirst;\n                return Stream.of(valueFromFirst).join(originalShrinks);\n            }\n            return originalShrinks;\n        }\n        const potentialSelectedIndex = this.canShrinkWithoutContextIndex(value);\n        if (potentialSelectedIndex === -1) {\n            return Stream.nil();\n        }\n        return this.defaultShrinkForFirst(potentialSelectedIndex).join(this.warbs[potentialSelectedIndex].arbitrary\n            .shrink(value, undefined)\n            .map((v) => this.mapIntoNextValue(potentialSelectedIndex, v, null, undefined)));\n    }\n    defaultShrinkForFirst(selectedIndex) {\n        ++this.context.depth;\n        try {\n            if (!this.mustFallbackToFirstInShrink(selectedIndex) || this.warbs[0].fallbackValue === undefined) {\n                return Stream.nil();\n            }\n        }\n        finally {\n            --this.context.depth;\n        }\n        const rawShrinkValue = new NextValue(this.warbs[0].fallbackValue.default, undefined);\n        return Stream.of(this.mapIntoNextValue(0, rawShrinkValue, null, undefined));\n    }\n    canShrinkWithoutContextIndex(value) {\n        if (this.mustGenerateFirst()) {\n            return this.warbs[0].arbitrary.canShrinkWithoutContext(value) ? 0 : -1;\n        }\n        try {\n            ++this.context.depth;\n            for (let idx = 0; idx !== this.warbs.length; ++idx) {\n                const warb = this.warbs[idx];\n                if (warb.weight !== 0 && warb.arbitrary.canShrinkWithoutContext(value)) {\n                    return idx;\n                }\n            }\n            return -1;\n        }\n        finally {\n            --this.context.depth;\n        }\n    }\n    mapIntoNextValue(idx, value, clonedMrngForFallbackFirst, biasFactor) {\n        const context = {\n            selectedIndex: idx,\n            originalBias: biasFactor,\n            originalContext: value.context,\n            clonedMrngForFallbackFirst,\n        };\n        return new NextValue(value.value, context);\n    }\n    safeGenerateForIndex(mrng, idx, biasFactor) {\n        ++this.context.depth;\n        try {\n            const value = this.warbs[idx].arbitrary.generate(mrng, biasFactor);\n            const clonedMrngForFallbackFirst = this.mustFallbackToFirstInShrink(idx) ? mrng.clone() : null;\n            return this.mapIntoNextValue(idx, value, clonedMrngForFallbackFirst, biasFactor);\n        }\n        finally {\n            --this.context.depth;\n        }\n    }\n    mustGenerateFirst() {\n        return this.constraints.maxDepth !== undefined && this.constraints.maxDepth <= this.context.depth;\n    }\n    mustFallbackToFirstInShrink(idx) {\n        return idx !== 0 && !!this.constraints.withCrossShrink && this.warbs[0].weight !== 0;\n    }\n    computeNegDepthBenefit() {\n        const depthFactor = this.constraints.depthFactor;\n        if (depthFactor === undefined || depthFactor <= 0 || this.warbs[0].weight === 0) {\n            return 0;\n        }\n        const depthBenefit = Math.floor(Math.pow(1 + depthFactor, this.context.depth)) - 1;\n        return -Math.min(this.totalWeight * depthBenefit, Number.MAX_SAFE_INTEGER) || 0;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}