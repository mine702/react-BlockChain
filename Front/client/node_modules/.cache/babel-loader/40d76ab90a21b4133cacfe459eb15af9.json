{"ast":null,"code":"import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { BigIntArbitrary } from './_internals/BigIntArbitrary.js';\nexport function bigUintN(n) {\n  if (n < 0) {\n    throw new Error('fc.bigUintN expects requested number of bits to be superior or equal to 0');\n  }\n\n  const min = BigInt(0);\n  const max = (BigInt(1) << BigInt(n)) - BigInt(1);\n  const arb = new BigIntArbitrary(min, max);\n  return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}","map":{"version":3,"names":["convertFromNextWithShrunkOnce","BigIntArbitrary","bigUintN","n","Error","min","BigInt","max","arb","defaultTarget"],"sources":["C:/Users/cyr50/OneDrive/바탕 화면/비트고급 프로젝트_tuffle/Front/client/node_modules/fast-check/lib/esm/arbitrary/bigUintN.js"],"sourcesContent":["import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { BigIntArbitrary } from './_internals/BigIntArbitrary.js';\nexport function bigUintN(n) {\n    if (n < 0) {\n        throw new Error('fc.bigUintN expects requested number of bits to be superior or equal to 0');\n    }\n    const min = BigInt(0);\n    const max = (BigInt(1) << BigInt(n)) - BigInt(1);\n    const arb = new BigIntArbitrary(min, max);\n    return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\n"],"mappings":"AAAA,SAASA,6BAAT,QAA8C,6CAA9C;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,OAAO,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;EACxB,IAAIA,CAAC,GAAG,CAAR,EAAW;IACP,MAAM,IAAIC,KAAJ,CAAU,2EAAV,CAAN;EACH;;EACD,MAAMC,GAAG,GAAGC,MAAM,CAAC,CAAD,CAAlB;EACA,MAAMC,GAAG,GAAG,CAACD,MAAM,CAAC,CAAD,CAAN,IAAaA,MAAM,CAACH,CAAD,CAApB,IAA2BG,MAAM,CAAC,CAAD,CAA7C;EACA,MAAME,GAAG,GAAG,IAAIP,eAAJ,CAAoBI,GAApB,EAAyBE,GAAzB,CAAZ;EACA,OAAOP,6BAA6B,CAACQ,GAAD,EAAMA,GAAG,CAACC,aAAJ,EAAN,CAApC;AACH"},"metadata":{},"sourceType":"module"}