{"ast":null,"code":"const debug = require(\"debug\")(\"contract:execute\");\n\nconst PromiEvent = require(\"./promievent\");\n\nconst EventEmitter = require(\"events\");\n\nconst utils = require(\"./utils\");\n\nconst StatusError = require(\"./statuserror\");\n\nconst Reason = require(\"./reason\");\n\nconst handlers = require(\"./handlers\");\n\nconst override = require(\"./override\");\n\nconst reformat = require(\"./reformat\");\n\nconst {\n  sendTransactionManual\n} = require(\"./manual-send\");\n\nconst execute = {\n  // -----------------------------------  Helpers --------------------------------------------------\n\n  /**\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\n   * Lacking an estimate, sets gas to have of latest blockLimit\n   * @param  {Object} params     `sendTransaction` parameters\n   * @param  {Number} blockLimit  most recent network block.blockLimit\n   * @return {Number}             gas estimate\n   */\n  getGasEstimate: function (params, blockLimit) {\n    let stacktrace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const constructor = this;\n    const interfaceAdapter = constructor.interfaceAdapter;\n    const web3 = constructor.web3;\n    return new Promise(function (accept, reject) {\n      // Always prefer gas specified by user (if a user sets gas to 0, that is treated\n      // as undefined here and we do proceed to do gas estimation)\n      if (params.gas) return accept(params.gas);\n      if (!constructor.autoGas) return accept();\n      interfaceAdapter.estimateGas(params, stacktrace).then(gas => {\n        // there are situations where the web3 gas estimation function in interfaceAdapter\n        // fails, specifically when a transaction will revert; we still want to continue\n        // the user flow for debugging purposes if the user has enabled stacktraces; so we provide a\n        // default gas for that situation, equal to half of the blockLimit for the latest block\n        //\n        // note: this means if a transaction will revert but the user does not have stacktracing enabled,\n        // they will get an error from the gas estimation and be unable to proceed; we may need to revisit this\n        if (gas === null) {\n          const defaultGas = utils.bigNumberify(Math.floor(blockLimit / 2));\n          accept(defaultGas.toHexString());\n        } else {\n          const limit = utils.bigNumberify(blockLimit); // if we did get a numerical gas estimate from interfaceAdapter, we\n          // multiply that estimate by the gasMultiplier to help ensure we\n          // have enough gas for the transaction\n\n          const bestEstimate = utils.multiplyBigNumberByDecimal(utils.bigNumberify(gas), constructor.gasMultiplier); // Check that we don't go over blockLimit\n\n          bestEstimate.gte(limit) ? accept(limit.sub(1).toHexString()) : accept(bestEstimate.toHexString());\n        }\n      }).catch(error => {\n        //HACK: Frankenstein together an error in a destructive fashion!!\n        debug(\"error: %O\", error);\n\n        const reason = Reason._extract({\n          error\n        }, web3);\n\n        error.reason = reason;\n\n        if (reason) {\n          error.message += ` -- Reason given: ${reason}.`;\n        }\n\n        reject(error);\n      });\n    });\n  },\n\n  /**\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\n   * objects web3 can consume.\n   * @param  {Object} constructor   TruffleContract constructor\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\n   * @param  {Array}  _arguments    Arguments passed to method invocation\n   * @param  {Boolean}  isCall      Used when preparing a call as opposed to a tx;\n   *                                  skips network checks and ignores default gas prices\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\n   */\n  prepareCall: async function (constructor, methodABI, _arguments, isCall) {\n    let args = Array.prototype.slice.call(_arguments);\n    let params = utils.getTxParams.call(constructor, methodABI, args, isCall);\n    args = utils.convertToEthersBN(args);\n\n    if (constructor.ens && constructor.ens.enabled) {\n      const {\n        web3\n      } = constructor;\n      const processedValues = await utils.ens.convertENSNames({\n        networkId: constructor.network_id,\n        ens: constructor.ens,\n        inputArgs: args,\n        inputParams: params,\n        methodABI,\n        web3\n      });\n      args = processedValues.args;\n      params = processedValues.params;\n    } //isCall flag used to skip network call for read data (calls type) methods invocation\n\n\n    if (isCall) {\n      return {\n        args,\n        params\n      };\n    }\n\n    const network = await constructor.detectNetwork();\n    return {\n      args,\n      params,\n      network\n    };\n  },\n\n  /**\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\n   * @param  {Any}  arg\n   * @return {Boolean}\n   */\n  hasTxParams: function (arg) {\n    return utils.is_object(arg) && !utils.is_big_number(arg);\n  },\n\n  /**\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\n   * to execute a call at.\n   * @param  {Array}  args      `arguments` that were passed to method\n   * @param  {Any}    lastArg    terminal argument passed to method\n   * @param  {Array}  inputs     ABI segment defining method arguments\n   * @return {Boolean}           true if final argument is `defaultBlock`\n   */\n  hasDefaultBlock: function (args, lastArg, inputs) {\n    const hasDefaultBlock = !execute.hasTxParams(lastArg) && args.length > inputs.length;\n    const hasDefaultBlockWithParams = execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\n    return hasDefaultBlock || hasDefaultBlockWithParams;\n  },\n  // -----------------------------------  Methods --------------------------------------------------\n\n  /**\n   * Executes method as .call and processes optional `defaultBlock` argument.\n   * @param  {Function} fn         method\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}             Return value of the call.\n   */\n  call: function (fn, methodABI, address) {\n    const constructor = this;\n    return function () {\n      let defaultBlock = constructor.web3.eth.defaultBlock || \"latest\";\n      const args = Array.prototype.slice.call(arguments);\n      const lastArg = args[args.length - 1];\n      const promiEvent = new PromiEvent(); // Extract defaultBlock parameter\n\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\n        defaultBlock = args.pop();\n      } //skipNetworkCheck flag passed to skip network call for read data (calls type) methods invocation\n\n\n      const skipNetworkCheck = true;\n      execute.prepareCall(constructor, methodABI, args, skipNetworkCheck).then(async _ref => {\n        let {\n          args,\n          params\n        } = _ref;\n        let result;\n        params.to = address;\n        promiEvent.eventEmitter.emit(\"execute:call:method\", {\n          fn: fn,\n          args: args,\n          address: address,\n          abi: methodABI,\n          contract: constructor\n        });\n        result = await fn(...args).call(params, defaultBlock);\n        result = reformat.numbers.call(constructor, result, methodABI.outputs);\n        return promiEvent.resolve(result);\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Executes method as .send\n   * @param  {Function} fn         Method to invoke\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @param  {String}   address    Deployed address of the targeted instance\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\n   */\n  send: function (fn, methodABI, address) {\n    const constructor = this;\n    const web3 = constructor.web3;\n    return function () {\n      const promiEvent = new PromiEvent(false, constructor.debugger);\n      execute.prepareCall(constructor, methodABI, arguments).then(async _ref2 => {\n        let {\n          args,\n          params,\n          network\n        } = _ref2;\n        const context = {\n          contract: constructor,\n          // Can't name this field `constructor` or `_constructor`\n          promiEvent: promiEvent,\n          blockLimit: network.blockLimit,\n          params: params\n        };\n        params.to = address;\n        params.data = fn ? fn(...args).encodeABI() : params.data;\n        promiEvent.eventEmitter.emit(\"execute:send:method\", {\n          fn,\n          args,\n          address,\n          abi: methodABI,\n          contract: constructor\n        });\n        params.gas = await execute.getGasEstimate.call(constructor, params, network.blockLimit, promiEvent.debug //apply stacktracing mode if promiEvent.debug is true\n        );\n        execute.sendTransaction(web3, params, promiEvent, context) //the crazy things we do for stacktracing...\n        .then(receipt => {\n          if (promiEvent.debug) {\n            // in this case, we need to manually invoke the handler since it\n            // hasn't been set up (hack?)\n            handlers.receipt(context, receipt);\n          } //otherwise, just let the handlers handle things\n\n        }).catch(override.start.bind(constructor, context));\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Deploys an instance\n   * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys\n   * @return {PromiEvent}             Resolves a TruffleContract instance\n   */\n  deploy: function (constructorABI) {\n    const constructor = this;\n    const web3 = constructor.web3;\n    return function () {\n      let deferred;\n      const promiEvent = new PromiEvent(false, constructor.debugger, true);\n      execute.prepareCall(constructor, constructorABI, arguments).then(async _ref3 => {\n        let {\n          args,\n          params,\n          network\n        } = _ref3;\n        const {\n          blockLimit\n        } = network;\n        utils.checkLibraries.apply(constructor); // Promievent and flag that allows instance to resolve (rather than just receipt)\n\n        const context = {\n          contract: constructor,\n          promiEvent,\n          blockLimit,\n          onlyEmitReceipt: true\n        };\n        const options = {\n          data: constructor.binary,\n          arguments: args\n        };\n        const contract = new web3.eth.Contract(constructor.abi);\n        params.data = contract.deploy(options).encodeABI();\n        params.gas = await execute.getGasEstimate.call(constructor, params, blockLimit, promiEvent.debug //apply stacktracing mode if promiEvent.debug is true\n        );\n        context.params = params;\n        promiEvent.eventEmitter.emit(\"execute:deploy:method\", {\n          args,\n          abi: constructorABI,\n          contract: constructor\n        });\n        deferred = execute.sendTransaction(web3, params, promiEvent, context); //the crazy things we do for stacktracing...\n\n        try {\n          const receipt = await deferred;\n\n          if (receipt.status !== undefined && !receipt.status) {\n            const reason = await Reason.get(params, web3);\n            const error = new StatusError(params, context.transactionHash, receipt, reason);\n            return context.promiEvent.reject(error);\n          }\n\n          const web3Instance = new web3.eth.Contract(constructor.abi, receipt.contractAddress);\n          web3Instance.transactionHash = context.transactionHash;\n          context.promiEvent.resolve(new constructor(web3Instance));\n        } catch (web3Error) {\n          // Manage web3's 50 blocks' timeout error.\n          // Web3's own subscriptions go dead here.\n          await override.start.call(constructor, context, web3Error);\n        }\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Begins listening for an event OR manages the event callback\n   * @param  {Function} fn  Solidity event method\n   * @return {Emitter}      Event emitter\n   */\n  event: function (fn) {\n    const constructor = this;\n    const decode = utils.decodeLogs;\n    let currentLogID = null; // Someone upstream is firing duplicates :/\n\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n\n    return function (params, callback) {\n      if (typeof params === \"function\") {\n        callback = params;\n        params = {};\n      } // As callback\n\n\n      if (callback !== undefined) {\n        const intermediary = function (err, e) {\n          if (err) return callback(err);\n          if (!dedupe(e.id)) return;\n          callback(null, decode.call(constructor, e, true)[0]);\n        };\n\n        return constructor.detectNetwork().then(() => fn.call(constructor.events, params, intermediary));\n      } // As EventEmitter\n\n\n      const emitter = new EventEmitter();\n      constructor.detectNetwork().then(() => {\n        const event = fn(params);\n        event.on(\"data\", e => dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]));\n        event.on(\"changed\", e => dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]));\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `allEvents`, with additional log decoding\n   * @return {PromiEvent}  EventEmitter\n   */\n  allEvents: function (web3Instance) {\n    const constructor = this;\n    const decode = utils.decodeLogs;\n    let currentLogID = null; // Someone upstream is firing duplicates :/\n\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n\n    return function (params) {\n      const emitter = new EventEmitter();\n      constructor.detectNetwork().then(() => {\n        const event = web3Instance.events.allEvents(params);\n        event.on(\"data\", e => dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]));\n        event.on(\"changed\", e => dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]));\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `getPastEvents`, with additional log decoding\n   * @return {Promise}  Resolves array of event objects\n   */\n  getPastEvents: function (web3Instance) {\n    const constructor = this;\n    const decode = utils.decodeLogs;\n    return function (event, options) {\n      return web3Instance.getPastEvents(event, options).then(events => decode.call(constructor, events, false));\n    };\n  },\n\n  /**\n   * Estimates gas cost of a method invocation\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  estimate: function (fn, methodABI) {\n    const constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(res => fn(...res.args).estimateGas(res.params));\n    };\n  },\n\n  /**\n   *\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  request: function (fn, methodABI, address) {\n    const constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(res => {\n        //clone res.params\n        let tx = {};\n\n        for (let key in res.params) {\n          tx[key] = res.params[key];\n        } //set to\n\n\n        tx.to = address; //set data\n\n        tx.data = fn(...res.args).encodeABI();\n        return tx;\n      });\n    };\n  },\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `estimateGas`\n  estimateDeployment: function () {\n    const constructor = this;\n    const constructorABI = constructor.abi.filter(i => i.type === \"constructor\")[0];\n    return execute.prepareCall(constructor, constructorABI, arguments).then(res => {\n      const options = {\n        data: constructor.binary,\n        arguments: res.args\n      };\n      delete res.params[\"data\"]; // Is this necessary?\n\n      const instance = new constructor.web3.eth.Contract(constructor.abi, res.params);\n      return instance.deploy(options).estimateGas(res.params);\n    });\n  },\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `request`\n  requestDeployment: function () {\n    const constructor = this;\n    const constructorABI = constructor.abi.filter(i => i.type === \"constructor\")[0];\n    return execute.prepareCall(constructor, constructorABI, arguments).then(res => {\n      //clone res.params\n      let tx = {};\n\n      for (let key in res.params) {\n        tx[key] = res.params[key];\n      }\n\n      const options = {\n        data: constructor.binary,\n        arguments: res.args\n      };\n      const instance = new constructor.web3.eth.Contract(constructor.abi, res.params);\n      tx.data = instance.deploy(options).encodeABI();\n      return tx;\n    });\n  },\n  //our own custom sendTransaction function, made to mimic web3's,\n  //while also being able to do things, like, say, store the transaction\n  //hash even in case of failure.  it's not as powerful in some ways,\n  //as it just returns an ordinary Promise rather than web3's PromiEvent,\n  //but it's more suited to our purposes (we're not using that PromiEvent\n  //functionality here anyway)\n  //input works the same as input to web3.sendTransaction\n  //(well, OK, it's lacking some things there too, but again, good enough\n  //for our purposes)\n  sendTransaction: async function (web3, params, promiEvent, context) {\n    //if we don't need the debugger, let's not risk any errors on our part,\n    //and just have web3 do everything\n    if (!promiEvent || !promiEvent.debug) {\n      const deferred = web3.eth.sendTransaction(params);\n      handlers.setup(deferred, context);\n      return deferred;\n    } //otherwise, do things manually!\n    //(and skip the PromiEvent stuff :-/ )\n\n\n    return sendTransactionManual(web3, params, promiEvent);\n  }\n};\nmodule.exports = execute;","map":{"version":3,"names":["debug","require","PromiEvent","EventEmitter","utils","StatusError","Reason","handlers","override","reformat","sendTransactionManual","execute","getGasEstimate","params","blockLimit","stacktrace","constructor","interfaceAdapter","web3","Promise","accept","reject","gas","autoGas","estimateGas","then","defaultGas","bigNumberify","Math","floor","toHexString","limit","bestEstimate","multiplyBigNumberByDecimal","gasMultiplier","gte","sub","catch","error","reason","_extract","message","prepareCall","methodABI","_arguments","isCall","args","Array","prototype","slice","call","getTxParams","convertToEthersBN","ens","enabled","processedValues","convertENSNames","networkId","network_id","inputArgs","inputParams","network","detectNetwork","hasTxParams","arg","is_object","is_big_number","hasDefaultBlock","lastArg","inputs","length","hasDefaultBlockWithParams","fn","address","defaultBlock","eth","arguments","promiEvent","pop","skipNetworkCheck","result","to","eventEmitter","emit","abi","contract","numbers","outputs","resolve","send","debugger","context","data","encodeABI","sendTransaction","receipt","start","bind","deploy","constructorABI","deferred","checkLibraries","apply","onlyEmitReceipt","options","binary","Contract","status","undefined","get","transactionHash","web3Instance","contractAddress","web3Error","event","decode","decodeLogs","currentLogID","dedupe","id","callback","intermediary","err","e","events","emitter","on","allEvents","getPastEvents","estimate","res","request","tx","key","estimateDeployment","filter","i","type","instance","requestDeployment","setup","module","exports"],"sources":["C:/Users/cyr50/OneDrive/바탕 화면/비트고급 프로젝트_tuffle/Front/client/node_modules/@truffle/contract/lib/execute.js"],"sourcesContent":["const debug = require(\"debug\")(\"contract:execute\");\nconst PromiEvent = require(\"./promievent\");\nconst EventEmitter = require(\"events\");\nconst utils = require(\"./utils\");\nconst StatusError = require(\"./statuserror\");\nconst Reason = require(\"./reason\");\nconst handlers = require(\"./handlers\");\nconst override = require(\"./override\");\nconst reformat = require(\"./reformat\");\nconst { sendTransactionManual } = require(\"./manual-send\");\n\nconst execute = {\n  // -----------------------------------  Helpers --------------------------------------------------\n  /**\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\n   * Lacking an estimate, sets gas to have of latest blockLimit\n   * @param  {Object} params     `sendTransaction` parameters\n   * @param  {Number} blockLimit  most recent network block.blockLimit\n   * @return {Number}             gas estimate\n   */\n  getGasEstimate: function (params, blockLimit, stacktrace = false) {\n    const constructor = this;\n    const interfaceAdapter = constructor.interfaceAdapter;\n    const web3 = constructor.web3;\n\n    return new Promise(function (accept, reject) {\n      // Always prefer gas specified by user (if a user sets gas to 0, that is treated\n      // as undefined here and we do proceed to do gas estimation)\n      if (params.gas) return accept(params.gas);\n      if (!constructor.autoGas) return accept();\n\n      interfaceAdapter\n        .estimateGas(params, stacktrace)\n        .then(gas => {\n          // there are situations where the web3 gas estimation function in interfaceAdapter\n          // fails, specifically when a transaction will revert; we still want to continue\n          // the user flow for debugging purposes if the user has enabled stacktraces; so we provide a\n          // default gas for that situation, equal to half of the blockLimit for the latest block\n          //\n          // note: this means if a transaction will revert but the user does not have stacktracing enabled,\n          // they will get an error from the gas estimation and be unable to proceed; we may need to revisit this\n          if (gas === null) {\n            const defaultGas = utils.bigNumberify(Math.floor(blockLimit / 2));\n            accept(defaultGas.toHexString());\n          } else {\n            const limit = utils.bigNumberify(blockLimit);\n            // if we did get a numerical gas estimate from interfaceAdapter, we\n            // multiply that estimate by the gasMultiplier to help ensure we\n            // have enough gas for the transaction\n            const bestEstimate = utils.multiplyBigNumberByDecimal(\n              utils.bigNumberify(gas),\n              constructor.gasMultiplier\n            );\n            // Check that we don't go over blockLimit\n            bestEstimate.gte(limit)\n              ? accept(limit.sub(1).toHexString())\n              : accept(bestEstimate.toHexString());\n          }\n        })\n        .catch(error => {\n          //HACK: Frankenstein together an error in a destructive fashion!!\n          debug(\"error: %O\", error);\n          const reason = Reason._extract({ error }, web3);\n          error.reason = reason;\n          if (reason) {\n            error.message += ` -- Reason given: ${reason}.`;\n          }\n          reject(error);\n        });\n    });\n  },\n\n  /**\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\n   * objects web3 can consume.\n   * @param  {Object} constructor   TruffleContract constructor\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\n   * @param  {Array}  _arguments    Arguments passed to method invocation\n   * @param  {Boolean}  isCall      Used when preparing a call as opposed to a tx;\n   *                                  skips network checks and ignores default gas prices\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\n   */\n  prepareCall: async function (constructor, methodABI, _arguments, isCall) {\n    let args = Array.prototype.slice.call(_arguments);\n    let params = utils.getTxParams.call(constructor, methodABI, args, isCall);\n\n    args = utils.convertToEthersBN(args);\n\n    if (constructor.ens && constructor.ens.enabled) {\n      const { web3 } = constructor;\n      const processedValues = await utils.ens.convertENSNames({\n        networkId: constructor.network_id,\n        ens: constructor.ens,\n        inputArgs: args,\n        inputParams: params,\n        methodABI,\n        web3\n      });\n      args = processedValues.args;\n      params = processedValues.params;\n    }\n    //isCall flag used to skip network call for read data (calls type) methods invocation\n    if (isCall) {\n      return { args, params };\n    }\n    const network = await constructor.detectNetwork();\n    return { args, params, network };\n  },\n\n  /**\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\n   * @param  {Any}  arg\n   * @return {Boolean}\n   */\n  hasTxParams: function (arg) {\n    return utils.is_object(arg) && !utils.is_big_number(arg);\n  },\n\n  /**\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\n   * to execute a call at.\n   * @param  {Array}  args      `arguments` that were passed to method\n   * @param  {Any}    lastArg    terminal argument passed to method\n   * @param  {Array}  inputs     ABI segment defining method arguments\n   * @return {Boolean}           true if final argument is `defaultBlock`\n   */\n  hasDefaultBlock: function (args, lastArg, inputs) {\n    const hasDefaultBlock =\n      !execute.hasTxParams(lastArg) && args.length > inputs.length;\n    const hasDefaultBlockWithParams =\n      execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\n    return hasDefaultBlock || hasDefaultBlockWithParams;\n  },\n\n  // -----------------------------------  Methods --------------------------------------------------\n\n  /**\n   * Executes method as .call and processes optional `defaultBlock` argument.\n   * @param  {Function} fn         method\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}             Return value of the call.\n   */\n  call: function (fn, methodABI, address) {\n    const constructor = this;\n\n    return function () {\n      let defaultBlock = constructor.web3.eth.defaultBlock || \"latest\";\n      const args = Array.prototype.slice.call(arguments);\n      const lastArg = args[args.length - 1];\n      const promiEvent = new PromiEvent();\n\n      // Extract defaultBlock parameter\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\n        defaultBlock = args.pop();\n      }\n      //skipNetworkCheck flag passed to skip network call for read data (calls type) methods invocation\n      const skipNetworkCheck = true;\n      execute\n        .prepareCall(constructor, methodABI, args, skipNetworkCheck)\n        .then(async ({ args, params }) => {\n          let result;\n\n          params.to = address;\n\n          promiEvent.eventEmitter.emit(\"execute:call:method\", {\n            fn: fn,\n            args: args,\n            address: address,\n            abi: methodABI,\n            contract: constructor\n          });\n\n          result = await fn(...args).call(params, defaultBlock);\n          result = reformat.numbers.call(\n            constructor,\n            result,\n            methodABI.outputs\n          );\n          return promiEvent.resolve(result);\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Executes method as .send\n   * @param  {Function} fn         Method to invoke\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @param  {String}   address    Deployed address of the targeted instance\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\n   */\n  send: function (fn, methodABI, address) {\n    const constructor = this;\n    const web3 = constructor.web3;\n\n    return function () {\n      const promiEvent = new PromiEvent(false, constructor.debugger);\n\n      execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(async ({ args, params, network }) => {\n          const context = {\n            contract: constructor, // Can't name this field `constructor` or `_constructor`\n            promiEvent: promiEvent,\n            blockLimit: network.blockLimit,\n            params: params\n          };\n\n          params.to = address;\n          params.data = fn ? fn(...args).encodeABI() : params.data;\n\n          promiEvent.eventEmitter.emit(\"execute:send:method\", {\n            fn,\n            args,\n            address,\n            abi: methodABI,\n            contract: constructor\n          });\n\n          params.gas = await execute.getGasEstimate.call(\n            constructor,\n            params,\n            network.blockLimit,\n            promiEvent.debug //apply stacktracing mode if promiEvent.debug is true\n          );\n\n          execute\n            .sendTransaction(web3, params, promiEvent, context) //the crazy things we do for stacktracing...\n            .then(receipt => {\n              if (promiEvent.debug) {\n                // in this case, we need to manually invoke the handler since it\n                // hasn't been set up (hack?)\n                handlers.receipt(context, receipt);\n              }\n              //otherwise, just let the handlers handle things\n            })\n            .catch(override.start.bind(constructor, context));\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Deploys an instance\n   * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys\n   * @return {PromiEvent}             Resolves a TruffleContract instance\n   */\n  deploy: function (constructorABI) {\n    const constructor = this;\n    const web3 = constructor.web3;\n\n    return function () {\n      let deferred;\n      const promiEvent = new PromiEvent(false, constructor.debugger, true);\n\n      execute\n        .prepareCall(constructor, constructorABI, arguments)\n        .then(async ({ args, params, network }) => {\n          const { blockLimit } = network;\n\n          utils.checkLibraries.apply(constructor);\n\n          // Promievent and flag that allows instance to resolve (rather than just receipt)\n          const context = {\n            contract: constructor,\n            promiEvent,\n            blockLimit,\n            onlyEmitReceipt: true\n          };\n\n          const options = {\n            data: constructor.binary,\n            arguments: args\n          };\n\n          const contract = new web3.eth.Contract(constructor.abi);\n          params.data = contract.deploy(options).encodeABI();\n\n          params.gas = await execute.getGasEstimate.call(\n            constructor,\n            params,\n            blockLimit,\n            promiEvent.debug //apply stacktracing mode if promiEvent.debug is true\n          );\n\n          context.params = params;\n\n          promiEvent.eventEmitter.emit(\"execute:deploy:method\", {\n            args,\n            abi: constructorABI,\n            contract: constructor\n          });\n\n          deferred = execute.sendTransaction(web3, params, promiEvent, context); //the crazy things we do for stacktracing...\n\n          try {\n            const receipt = await deferred;\n            if (receipt.status !== undefined && !receipt.status) {\n              const reason = await Reason.get(params, web3);\n\n              const error = new StatusError(\n                params,\n                context.transactionHash,\n                receipt,\n                reason\n              );\n\n              return context.promiEvent.reject(error);\n            }\n\n            const web3Instance = new web3.eth.Contract(\n              constructor.abi,\n              receipt.contractAddress\n            );\n            web3Instance.transactionHash = context.transactionHash;\n\n            context.promiEvent.resolve(new constructor(web3Instance));\n          } catch (web3Error) {\n            // Manage web3's 50 blocks' timeout error.\n            // Web3's own subscriptions go dead here.\n            await override.start.call(constructor, context, web3Error);\n          }\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Begins listening for an event OR manages the event callback\n   * @param  {Function} fn  Solidity event method\n   * @return {Emitter}      Event emitter\n   */\n  event: function (fn) {\n    const constructor = this;\n    const decode = utils.decodeLogs;\n    let currentLogID = null;\n\n    // Someone upstream is firing duplicates :/\n    function dedupe(id) {\n      return id === currentLogID ? false : (currentLogID = id);\n    }\n\n    return function (params, callback) {\n      if (typeof params === \"function\") {\n        callback = params;\n        params = {};\n      }\n\n      // As callback\n      if (callback !== undefined) {\n        const intermediary = function (err, e) {\n          if (err) return callback(err);\n          if (!dedupe(e.id)) return;\n          callback(null, decode.call(constructor, e, true)[0]);\n        };\n\n        return constructor\n          .detectNetwork()\n          .then(() => fn.call(constructor.events, params, intermediary));\n      }\n\n      // As EventEmitter\n      const emitter = new EventEmitter();\n\n      constructor.detectNetwork().then(() => {\n        const event = fn(params);\n\n        event.on(\n          \"data\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"data\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\n          \"changed\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"changed\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `allEvents`, with additional log decoding\n   * @return {PromiEvent}  EventEmitter\n   */\n  allEvents: function (web3Instance) {\n    const constructor = this;\n    const decode = utils.decodeLogs;\n    let currentLogID = null;\n\n    // Someone upstream is firing duplicates :/\n    function dedupe(id) {\n      return id === currentLogID ? false : (currentLogID = id);\n    }\n\n    return function (params) {\n      const emitter = new EventEmitter();\n\n      constructor.detectNetwork().then(() => {\n        const event = web3Instance.events.allEvents(params);\n\n        event.on(\n          \"data\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"data\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\n          \"changed\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"changed\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `getPastEvents`, with additional log decoding\n   * @return {Promise}  Resolves array of event objects\n   */\n  getPastEvents: function (web3Instance) {\n    const constructor = this;\n    const decode = utils.decodeLogs;\n\n    return function (event, options) {\n      return web3Instance\n        .getPastEvents(event, options)\n        .then(events => decode.call(constructor, events, false));\n    };\n  },\n\n  /**\n   * Estimates gas cost of a method invocation\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  estimate: function (fn, methodABI) {\n    const constructor = this;\n    return function () {\n      return execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(res => fn(...res.args).estimateGas(res.params));\n    };\n  },\n\n  /**\n   *\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  request: function (fn, methodABI, address) {\n    const constructor = this;\n    return function () {\n      return execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(res => {\n          //clone res.params\n          let tx = {};\n          for (let key in res.params) {\n            tx[key] = res.params[key];\n          }\n          //set to\n          tx.to = address;\n          //set data\n          tx.data = fn(...res.args).encodeABI();\n          return tx;\n        });\n    };\n  },\n\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `estimateGas`\n  estimateDeployment: function () {\n    const constructor = this;\n\n    const constructorABI = constructor.abi.filter(\n      i => i.type === \"constructor\"\n    )[0];\n\n    return execute\n      .prepareCall(constructor, constructorABI, arguments)\n      .then(res => {\n        const options = {\n          data: constructor.binary,\n          arguments: res.args\n        };\n\n        delete res.params[\"data\"]; // Is this necessary?\n\n        const instance = new constructor.web3.eth.Contract(\n          constructor.abi,\n          res.params\n        );\n        return instance.deploy(options).estimateGas(res.params);\n      });\n  },\n\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `request`\n  requestDeployment: function () {\n    const constructor = this;\n\n    const constructorABI = constructor.abi.filter(\n      i => i.type === \"constructor\"\n    )[0];\n\n    return execute\n      .prepareCall(constructor, constructorABI, arguments)\n      .then(res => {\n        //clone res.params\n        let tx = {};\n        for (let key in res.params) {\n          tx[key] = res.params[key];\n        }\n\n        const options = {\n          data: constructor.binary,\n          arguments: res.args\n        };\n\n        const instance = new constructor.web3.eth.Contract(\n          constructor.abi,\n          res.params\n        );\n        tx.data = instance.deploy(options).encodeABI();\n        return tx;\n      });\n  },\n\n  //our own custom sendTransaction function, made to mimic web3's,\n  //while also being able to do things, like, say, store the transaction\n  //hash even in case of failure.  it's not as powerful in some ways,\n  //as it just returns an ordinary Promise rather than web3's PromiEvent,\n  //but it's more suited to our purposes (we're not using that PromiEvent\n  //functionality here anyway)\n  //input works the same as input to web3.sendTransaction\n  //(well, OK, it's lacking some things there too, but again, good enough\n  //for our purposes)\n  sendTransaction: async function (web3, params, promiEvent, context) {\n    //if we don't need the debugger, let's not risk any errors on our part,\n    //and just have web3 do everything\n    if (!promiEvent || !promiEvent.debug) {\n      const deferred = web3.eth.sendTransaction(params);\n      handlers.setup(deferred, context);\n      return deferred;\n    }\n    //otherwise, do things manually!\n    //(and skip the PromiEvent stuff :-/ )\n    return sendTransactionManual(web3, params, promiEvent);\n  }\n};\n\nmodule.exports = execute;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}