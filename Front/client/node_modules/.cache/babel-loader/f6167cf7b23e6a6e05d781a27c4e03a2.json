{"ast":null,"code":"import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\n\nfunction isSafeContext(context) {\n  return context !== undefined;\n}\n\nfunction toGeneratorNextValue(value) {\n  if (value.hasToBeCloned) {\n    return new NextValue(value.value_, {\n      generatorContext: value.context\n    }, () => value.value);\n  }\n\n  return new NextValue(value.value_, {\n    generatorContext: value.context\n  });\n}\n\nfunction toShrinkerNextValue(value) {\n  if (value.hasToBeCloned) {\n    return new NextValue(value.value_, {\n      shrinkerContext: value.context\n    }, () => value.value);\n  }\n\n  return new NextValue(value.value_, {\n    shrinkerContext: value.context\n  });\n}\n\nexport class WithShrinkFromOtherArbitrary extends NextArbitrary {\n  constructor(generatorArbitrary, shrinkerArbitrary) {\n    super();\n    this.generatorArbitrary = generatorArbitrary;\n    this.shrinkerArbitrary = shrinkerArbitrary;\n  }\n\n  generate(mrng, biasFactor) {\n    return toGeneratorNextValue(this.generatorArbitrary.generate(mrng, biasFactor));\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.shrinkerArbitrary.canShrinkWithoutContext(value);\n  }\n\n  shrink(value, context) {\n    if (!isSafeContext(context)) {\n      return this.shrinkerArbitrary.shrink(value, undefined).map(toShrinkerNextValue);\n    }\n\n    if ('generatorContext' in context) {\n      return this.generatorArbitrary.shrink(value, context.generatorContext).map(toGeneratorNextValue);\n    }\n\n    return this.shrinkerArbitrary.shrink(value, context.shrinkerContext).map(toShrinkerNextValue);\n  }\n\n}","map":{"version":3,"names":["NextArbitrary","NextValue","isSafeContext","context","undefined","toGeneratorNextValue","value","hasToBeCloned","value_","generatorContext","toShrinkerNextValue","shrinkerContext","WithShrinkFromOtherArbitrary","constructor","generatorArbitrary","shrinkerArbitrary","generate","mrng","biasFactor","canShrinkWithoutContext","shrink","map"],"sources":["C:/Users/cyr50/OneDrive/바탕 화면/비트고급 프로젝트_tuffle/Front/client/node_modules/fast-check/lib/esm/arbitrary/_internals/WithShrinkFromOtherArbitrary.js"],"sourcesContent":["import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nfunction isSafeContext(context) {\n    return context !== undefined;\n}\nfunction toGeneratorNextValue(value) {\n    if (value.hasToBeCloned) {\n        return new NextValue(value.value_, { generatorContext: value.context }, () => value.value);\n    }\n    return new NextValue(value.value_, { generatorContext: value.context });\n}\nfunction toShrinkerNextValue(value) {\n    if (value.hasToBeCloned) {\n        return new NextValue(value.value_, { shrinkerContext: value.context }, () => value.value);\n    }\n    return new NextValue(value.value_, { shrinkerContext: value.context });\n}\nexport class WithShrinkFromOtherArbitrary extends NextArbitrary {\n    constructor(generatorArbitrary, shrinkerArbitrary) {\n        super();\n        this.generatorArbitrary = generatorArbitrary;\n        this.shrinkerArbitrary = shrinkerArbitrary;\n    }\n    generate(mrng, biasFactor) {\n        return toGeneratorNextValue(this.generatorArbitrary.generate(mrng, biasFactor));\n    }\n    canShrinkWithoutContext(value) {\n        return this.shrinkerArbitrary.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        if (!isSafeContext(context)) {\n            return this.shrinkerArbitrary.shrink(value, undefined).map(toShrinkerNextValue);\n        }\n        if ('generatorContext' in context) {\n            return this.generatorArbitrary.shrink(value, context.generatorContext).map(toGeneratorNextValue);\n        }\n        return this.shrinkerArbitrary.shrink(value, context.shrinkerContext).map(toShrinkerNextValue);\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,mDAA9B;AACA,SAASC,SAAT,QAA0B,+CAA1B;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;EAC5B,OAAOA,OAAO,KAAKC,SAAnB;AACH;;AACD,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;EACjC,IAAIA,KAAK,CAACC,aAAV,EAAyB;IACrB,OAAO,IAAIN,SAAJ,CAAcK,KAAK,CAACE,MAApB,EAA4B;MAAEC,gBAAgB,EAAEH,KAAK,CAACH;IAA1B,CAA5B,EAAiE,MAAMG,KAAK,CAACA,KAA7E,CAAP;EACH;;EACD,OAAO,IAAIL,SAAJ,CAAcK,KAAK,CAACE,MAApB,EAA4B;IAAEC,gBAAgB,EAAEH,KAAK,CAACH;EAA1B,CAA5B,CAAP;AACH;;AACD,SAASO,mBAAT,CAA6BJ,KAA7B,EAAoC;EAChC,IAAIA,KAAK,CAACC,aAAV,EAAyB;IACrB,OAAO,IAAIN,SAAJ,CAAcK,KAAK,CAACE,MAApB,EAA4B;MAAEG,eAAe,EAAEL,KAAK,CAACH;IAAzB,CAA5B,EAAgE,MAAMG,KAAK,CAACA,KAA5E,CAAP;EACH;;EACD,OAAO,IAAIL,SAAJ,CAAcK,KAAK,CAACE,MAApB,EAA4B;IAAEG,eAAe,EAAEL,KAAK,CAACH;EAAzB,CAA5B,CAAP;AACH;;AACD,OAAO,MAAMS,4BAAN,SAA2CZ,aAA3C,CAAyD;EAC5Da,WAAW,CAACC,kBAAD,EAAqBC,iBAArB,EAAwC;IAC/C;IACA,KAAKD,kBAAL,GAA0BA,kBAA1B;IACA,KAAKC,iBAAL,GAAyBA,iBAAzB;EACH;;EACDC,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;IACvB,OAAOb,oBAAoB,CAAC,KAAKS,kBAAL,CAAwBE,QAAxB,CAAiCC,IAAjC,EAAuCC,UAAvC,CAAD,CAA3B;EACH;;EACDC,uBAAuB,CAACb,KAAD,EAAQ;IAC3B,OAAO,KAAKS,iBAAL,CAAuBI,uBAAvB,CAA+Cb,KAA/C,CAAP;EACH;;EACDc,MAAM,CAACd,KAAD,EAAQH,OAAR,EAAiB;IACnB,IAAI,CAACD,aAAa,CAACC,OAAD,CAAlB,EAA6B;MACzB,OAAO,KAAKY,iBAAL,CAAuBK,MAAvB,CAA8Bd,KAA9B,EAAqCF,SAArC,EAAgDiB,GAAhD,CAAoDX,mBAApD,CAAP;IACH;;IACD,IAAI,sBAAsBP,OAA1B,EAAmC;MAC/B,OAAO,KAAKW,kBAAL,CAAwBM,MAAxB,CAA+Bd,KAA/B,EAAsCH,OAAO,CAACM,gBAA9C,EAAgEY,GAAhE,CAAoEhB,oBAApE,CAAP;IACH;;IACD,OAAO,KAAKU,iBAAL,CAAuBK,MAAvB,CAA8Bd,KAA9B,EAAqCH,OAAO,CAACQ,eAA7C,EAA8DU,GAA9D,CAAkEX,mBAAlE,CAAP;EACH;;AApB2D"},"metadata":{},"sourceType":"module"}